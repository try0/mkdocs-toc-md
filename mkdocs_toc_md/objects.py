class TocConfig:
    def __init__(self, mkdocs_config, plugin_config) -> None:
        self.mkdocs_config = mkdocs_config
        self.plugin_config = plugin_config

    def get_output_comment(self) -> str:
        toc_output_comment = ''

        output_comment_type = self.plugin_config['output_comment_type']

        if output_comment_type == 'none':
            return toc_output_comment

        if output_comment_type == 'metadata':
            toc_output_comment += '---\n'
            toc_output_comment += 'toc_output_comment: Generated by mkdocs-toc-md plugin\n'
            toc_output_comment += '---\n'
            toc_output_comment += '\n'
            return toc_output_comment

        toc_output_comment += '<!-- ====================== TOC ====================== -->\n'
        toc_output_comment += '<!-- Generated by mkdocs-toc-md plugin -->\n'
        toc_output_comment += '<!-- ================================================= -->\n'
        toc_output_comment += '\n'
        return toc_output_comment


class TocPageData:
    """ Page params """
    toc_output_comment = None
    page_title = None
    page_description = None
    toc_headers = []


class TocItem:
    """ headers """
    src_level = 1
    text = None
    description = None
    url = None
    metadata = dict()

    def get_md_header_prefix(self) -> str:
        """ Gets level as markdown header. """

        prefix = '#'
        for num in range(self.src_level):
            prefix += '#'
        return prefix

    def get_text_as_md_header(self) -> str:
        """ Gets text as markdown header. """

        prefix = self.get_md_header_prefix()

        if self.url:
            return prefix + ' [' + self.text + '](' + self.url + ')'

        return prefix + ' ' + self.text

    def get_text_as_md_ul_item(self) -> str:
        """ Gets text as markdown list item. """

        if self.url:
            return '* [' + self.text + '](' + self.url + ')'

        return '* ' + self.text

    def get_text_as_md_ol_item(self) -> str:
        """ Gets text as markdown ordered list item. """

        if self.url:
            return '1. [' + self.text + '](' + self.url + ')'

        return '1. ' + self.text

    def has_description(self) -> bool:
        return self.description is not None
